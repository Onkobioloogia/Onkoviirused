print(jagsfit)
cin <- c(IV$conc,Oral$conc)
ncol(jagsfit$BUGSoutput$sims.list$predIV)
jagsfit$BUGSoutput$sims.list$predIV
mIV <- sapply(1:ncol(jagsfit$BUGSoutput$sims.list$predIV),
function(x) {
mean(jagsfit$BUGSoutput$sims.list$predIV[,x])
}
mIV
mIV <- sapply(1:ncol(jagsfit$BUGSoutput$sims.list$predIV),
function(x) {
mean(jagsfit$BUGSoutput$sims.list$predIV[,x])
}
)
mIV
mO  <- sapply(1:ncol(jagsfit$BUGSoutput$sims.list$predO),
function(x) {
mean(jagsfit$BUGSoutput$sims.list$predO[,x])
}
)
mO
c(IV$conc,Oral$conc)-c(mIV,mO)
c(IV$conc,Oral$conc)
c(mIV,mO)
plot(x=c(IV$conc,Oral$conc),y=c(IV$conc,Oral$conc)-c(mIV,mO))
source('~/.active-rstudio-document', echo=TRUE)
rgamma(1000,100,10)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("devtools")
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install.packages(c("adegenet", "BH", "bit", "devtools", "evaluate", "ff", "foreach", "gdata", "gplots", "Hmisc", "httpuv", "iterators", "lattice", "lme4", "markdown", "Matrix", "mclust", "minqa", "mvtnorm", "nnet", "RcppArmadillo", "roxygen2", "RTextTools", "shiny", "sjPlot", "slam", "sp"))
install.packages("lme4")
install.packages(c("adegenet", "bootstrap", "car", "caTools", "chemCal", "dynamicTreeCut", "ggthemes", "gtools", "httpuv", "igraph", "lme4", "memoise", "minqa", "mvtnorm", "reshape", "reshape2", "RJSONIO", "robustbase", "roxygen2", "RTextTools", "scales", "segmented", "shiny", "sjPlot", "swirl"))
install.packages(c("lme4", "shiny"))
x <- rnorm(1000)
PP.test(x)
y <- cumsum(x) # has unit root
PP.test(y)
plot(x)
plot(x, type="l")
plot(x, type="l")
plot(y, type="l")
library(XML)
theurl <- "http://2014.voistlus.ee/results/stage/34/type/marathon"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
tables[[which.max(n.rows)]]
mulgi14 <- tables[[which.max(n.rows)]]
View(mulgi14)
url <- htmlParse(theurl, encoding = "UTF-8")
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
mulgi14 <- tables[[which.max(n.rows)]]
View(mulgi14)
View(mulgi14)
hist(mulgi14$Aeg)
library(graphics)
hist(mulgi14$Aeg)
theurl <- "http://2014.voistlus.ee/results/stage/34/type/halfMarathon"
url <- htmlParse(theurl, encoding = "UTF-8")
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
Mulgi14HM <- tables[[which.max(n.rows)]]
theurl <- "http://2014.voistlus.ee/results/stage/34/type/marathon"
url <- htmlParse(theurl, encoding = "UTF-8")
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
Mulgi14M <- tables[[which.max(n.rows)]]
rm(mulgi14)
View(Mulgi14M)
as.POSIXct(Mulgi14M$Aeg, "%H:%M:%S"))
as.POSIXct(Mulgi14M$Aeg, "%H:%M:%S")
class(Mulgi14M$Aeg)
as.character(Mulgi14M$Aeg)
as.POSIXct(as.character(Mulgi14M$Aeg), "%H:%M:%S")
strptime(Mulgi14M$Aeg, "%H:%M:%S")
as.POSIXct(as.character(Mulgi14M$Aeg), "%H:%M:%S")
library(chron)
times(Mulgi14M$Aeg)
Mulgi14M$Aeg <- times(Mulgi14M$Aeg)
class(Mulgi14M$Aeg)
hist(Mulgi14M$Aeg)
hist(Mulgi14M$Aeg, breaks = 100)
hist(Mulgi14M$Aeg, breaks = 50)
Mulgi14HM$Aeg <- times(Mulgi14HM$Aeg)
hist(Mulgi14HM$Aeg, breaks = 50)
View(Mulgi14HM)
View(Mulgi14HM)
Mulgi14HM$"Etapi Ãœldkoht"
[Mulgi14HM[,1]
Mulgi14HM[,1]
Mulgi14HM[,1]==9999
Mulgi14HM <- Mulgi14HM[!Mulgi14HM[,1]==9999,]
Mulgi14HM$Aeg <- times(Mulgi14HM$Aeg)
hist(Mulgi14HM$Aeg, breaks = 50)
hist(Mulgi14M$Aeg, breaks = 50)
length(Mulgi14M$Aeg)
length(Mulgi14M$Aeg)/20
floor(length(Mulgi14M$Aeg)/20)
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/20))
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/20))
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/10))
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/20))
hist(Mulgi14HM$Aeg, breaks = floor(length(Mulgi14HM$Aeg)/20))
hist(Mulgi14HM$Aeg, breaks = floor(length(Mulgi14HM$Aeg)/10))
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/10))
hist(Mulgi14HM$Aeg, breaks = floor(length(Mulgi14HM$Aeg)/10))
hist(Mulgi14M$Aeg, breaks = floor(length(Mulgi14M$Aeg)/10))
qplot(Aeg, data = Mulgi14M, geom="histogram")
library(ggplot2)
qplot(Aeg, data = Mulgi14M, geom="histogram")
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_datetime(format="%H/%M/%S")
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_datetime("", format="%H/%M/%S")
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_datetime()
qplot(Aeg, data = Mulgi14M, geom="histogram")
library(scales)
qplot(Aeg, data = Mulgi14M, geom="histogram")
+   scale_x_datetime()
qplot(Aeg, data = Mulgi14M, geom="histogram") + scale_x_datetime()
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_datetime(breaks = "1 minute", labels=date_format("%H:%M:%S"))
qplot(Aeg, data = Mulgi14M, geom="histogram")
qplot(Aeg, data = Mulgi14M, geom="histogram")
+ scale_x_datetime(major = '1 hours', labels=date_format("%H:%M:%S"))
+ scale_x_datetime(labels=date_format("%H:%M:%S"))
qplot(Aeg, data = Mulgi14M, geom="histogram")
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_date(limits = as.POSIXct(Mulgi14M$Aeg),
format = "%H:%M:%S")
qplot(Aeg, data = Mulgi14M, geom="histogram") +
scale_x_date(limits = as.POSIXct(Mulgi14M$Aeg))
as.POSIXct(Mulgi14M$Aeg)
Mulgi14M$Aeg
times(Mulgi14M)
View(Mulgi14M)
library(lubridate)
hms(Mulgi14M$Aeg)
dminutes(hms(Mulgi14M$Aeg))
start <- ymd("2014-05-4")
finish <- start + hms(Mulgi14M$Aeg)
finish
start <- ymd("2014-05-4", tz = "Tallinn")
finish <- start + hms(Mulgi14M$Aeg)
finish
start <- ymd("2014-05-4", tz = "UTC+02:00")
finish <- start + hms(Mulgi14M$Aeg)
finish
Mulgi14HM$finish <- start + hms(Mulgi14M$Aeg)
Mulgi14M$finish <- start + hms(Mulgi14M$Aeg)
Mulgi14M$finish
qplot(finish, data = Mulgi14M, geom="histogram")
start <- ymd("2014-05-4", tz = "Europe/Tallinn")
Mulgi14M$finish <- start + hms(Mulgi14M$Aeg)
qplot(finish, data = Mulgi14M, geom="histogram")
theurl <- "http://2014.voistlus.ee/results/stage/34/type/marathon"
url <- htmlParse(theurl, encoding = "UTF-8")
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
Mulgi14M <- tables[[which.max(n.rows)]]
start <- ymd("2014-05-4", tz = "Europe/Tallinn")
hms(Mulgi14M$Aeg)
Mulgi14M$finish <- start + hms(Mulgi14M$Aeg)
qplot(finish, data = Mulgi14M, geom="histogram")
qplot(finish, data = Mulgi14M, geom="histogram", binwidth = 10)
qplot(finish, data = Mulgi14M, geom="histogram", binwidth = 30)
qplot(finish, data = Mulgi14M, geom="histogram")
View(Mulgi14M)
Mulgi14M$finish
qplot(finish, data = Mulgi14M, geom="histogram")
url <- htmlParse(results[1], encoding = "UTF-8")
library(XML)
url <- htmlParse(results[1], encoding = "UTF-8")
url <- "http://estoniancup.ee/2013/tulemused-2013/"
htmlfile <- htmlTreeParse(url)
xmltop <- xmlRoot(htmlfile)
print(xmltop)[4]
links <- getHTMLLinks(url)[27:34]
results <- getHTMLLinks(links[1])[28:29]
url <- htmlParse(results[1], encoding = "UTF-8")
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
Mulgi14M <- tables[[which.max(n.rows)]]
results
links
getHTMLLinks(links[2])
url <- "http://estoniancup.ee/2013/tulemused-2013/"
getHTMLLinks(url)
url <- "http://estoniancup.ee/" #2013/tulemused-2013/
links <- getHTMLLinks(url)
links
getHTMLLinks(links)[18]
getHTMLLinks(links)[22]
links
url <- "http://estoniancup.ee/2013/tulemused/" #
links <- getHTMLLinks(url) # [27:34]
links
results <- getHTMLLinks(links)[19:22]
results <- getHTMLLinks(links)[19:22]
links
results <- getHTMLLinks(links)[19]
links[19]
results <- links[19:22]
results <- sapply(results, htmlParse, encoding = "UTF-8")
tabls <- lapply(results, readHTMLTable)
tables <- lapply(results, readHTMLTable)
results
tables
url <- "http://estoniancup.ee/2013/tulemused/" #
links <- getHTMLLinks(url) # [27:34]
links
getHTMLLinks(links[20])
links
links <- sapply(links[20:22], getHTMLLinks)
links
str(links)
url <- "http://estoniancup.ee/2013/tulemused/" #
links <- getHTMLLinks(url) # [27:34]
links <- lapply(links[20:22], getHTMLLinks)
str(links)
links[[1]]
links[[2]]
links[[3]]
links[[3]][27:34]
linx <- lapply(links, function(x) getHTMLLinks(x[27:34]))
linx <- lapply(links, function(x) lapply(x[27:34], getHTMLLinks))
linx[[3]]
linx[[1]]
log(1)
log(10)
log(.5)
log(1.5)
log(1.0000001)
1.4*65
130+91
source('~/.active-rstudio-document', echo=TRUE)
x <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
y <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
cor(x,y)
for (k in seq(K)) {
#white noise
x <- rnorm(N)
y <- rnorm(N)
cc1 <- rbind(cc1,cor(x,y))
#AR 1
x <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
y <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
cc2 <- rbind(cc2,cor(x,y))
#random walk
x <- cumsum(rnorm(N))
y <- cumsum(rnorm(N))
cc3 <- rbind(cc3,cor(x,y))
}
hist(cc2,breaks=seq(-1,1,.1),main="AR(1)",xlab="")
hist(cc3,breaks=seq(-1,1,.1),main="random walk",xlab="corr. coeff.")
cumsum(rnorm(N))
ar(x)
ar(y)
fit <- ar(y)
plot(fit)
x <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
y <- arima.sim(model=list(order=c(1,0,0),ar=0.5),n=N)
cc2 <- rbind(cc2,cor(x,y))
cc2 <- rbind(cc2,cor(x,y))
fit <- ar(cc2)
plot(fit)
fit
sumar(fit)
summary(fit)
plot(fit)
fit <- arima(cc2)
plot(fit)
fit
arima(lh, order = c(1,0,0))
require(graphics)
tsdiag(fit)
fit <- arima(lh, order = c(1,0,0))
tsdiag(fit)
ar(lh)
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
biocLite("pathview")
cumsum(rnorm(100))
t1 <- cumsum(rnorm(100))
plot(t1)
t2 <- cumsum(rnorm(100))
plot(t2)
rm(t1)
rm(t2)
a <- cumsum(rnorm(100))
b <- cumsum(rnorm(100))
s <- rowMeans(cbind(a, b), na.rm=TRUE)
plot(s)
plot(c(a,b))
plot(a)
plot(b)
plot(c(a,b))
s <- rowMeans(cbind(a, b), na.rm=TRUE)
plot(s)
a <- ts(cumsum(rnorm(100)))
b <- ts(cumsum(rnorm(100)))
plot(c(a,b))
plot(a)
plot(b)
mean(a,b)
mean(c(a,b))
mean(a)
mean(b)
library("lattice")
x0<-matrix(NA,350,76)
for(i in 1:150)     x0[i,]<-arima.sim(list(order=c(1,0,0),ar=0.9),n=76)
for(i in 151:350)   x0[i,]<-arima.sim(list(order=c(1,0,0),ar=-0.9),n=76)
library(reshape2)
aa.m <- melt(aa)
aa<-t(x0)
colnames(aa)<-c(paste0("v0_",1:150),paste0("v1_",1:200))
aa<-as.ts(aa)
aa.m <- melt(aa)
gsub('^(v[0-9])_(.*)','\\1',aa.m$Var2)
aa.m$group <- gsub('^(v[0-9])_(.*)','\\1',aa.m$Var2)
xyplot(value~Var1|group,data=aa.m,type='l',groups=group)
x0 <- do.call(rbind, lapply(1:350, function(i) {
arima.sim(list(order=c(1,0,0), ar=ifelse(i <= 150, 0.9, -0.9)), n=76)
}))
aa<-t(x0)
colnames(aa)<-c(paste0("v0_",1:150),paste0("v1_",1:200))
aa<-as.ts(aa)
plotStuff <- function(indices, ...) {
plot.new()
plot.window(xlim=c(1, ncol(x0)), ylim=range(x0[indices,]))
box()
for (i in indices)
lines(x0[i,], ...)
}
par(mfrow=c(2,1), mar=rep(1,4)) # two rows, reduced margin
plotStuff(1:150,   col="orange")
plotStuff(151:350, col="blue")
aa<-t(x0)
colnames(aa)<-c(paste0("v0_",1:150),paste0("v1_",1:200))
aa<-as.ts(aa)
aa.m <- melt(aa)
aa.m$group <- gsub('^(v[0-9])_(.*)','\\1',aa.m$Var2)
xyplot(value~Var1|group,data=aa.m,type='l',groups=group)
par(mfrow=c(2,1), mar=rep(1,4)) # two rows, reduced margin
plotStuff(1:150,   col="orange")
plotStuff(151:350, col="blue")
install.packages("quadrupen")
library(quadrupen)
beta <- rep(c(0,1,0,-1,0), c(25,10,25,10,25))
cor  <- 0.75
Soo  <- toeplitz(cor^(0:(25-1))) ## Toeplitz correlation for irrelevant variable
Sww  <- matrix(cor,10,10) ## bloc correlation between active variables
Sigma <- bdiag(Soo,Sww,Soo,Sww,Soo) + 0.1
diag(Sigma) <- 1
n <- 100
chol(Sigma)
matrix(rnorm(95*n),n,95)
x <- as.matrix(matrix(rnorm(95*n),n,95) %*% chol(Sigma))
rep(c(0,1,0,-1,0), c(25,10,25,10,25))
x
%*%
help(%*%)
help("%*%")
n %*% n
1:n %*% 1:n
x %*% beta
as.matrix(matrix(rnorm(95*n),n,95) %*% chol(Sigma))
beta
x %*% beta
rnorm(n,0,10)
y <- 10 + x %*% beta + rnorm(n,0,10)
cv.double <- crossval(x,y, lambda2=10^seq(2,-2,len=50), nlambda1=50)
cv.fit <- crossval(x,y)
2*pi
2*pi*5
contributors()
Kasvajad_haigestumus_2000.9 <- read.csv("~/Dropbox/Loeng/Onkobioloogia/Kasvajad_haigestumus_2000-9.csv")
View(Kasvajad_haigestumus_2000.9)
Kasvajad_haigestumus_2000.9 <- read.csv("~/Dropbox/Loeng/Onkobioloogia/Kasvajad_haigestumus_2000-9.csv")
View(Kasvajad_haigestumus_2000.9)
source('~/.active-rstudio-document', echo=TRUE)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 5
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 3
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
runif(10)
runif(71:100)
10*runif(71:100)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10*runif(71:100)
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
100 + arima.sim(model = list(ar = 0.999), n = 100)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 5*runif(71:100)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + (5*runif(71:100))
data <- cbind(y, x1)
data
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[25:100] <- y[25:100] + (5*runif(25:100))
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
pre.period <- c(1, 24)
post.period <- c(25, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 500)
y <- 1.2 * x1 + rnorm(500)
y[25:500] <- y[25:500] + (5*runif(25:500))
data <- cbind(y, x1)
str(data)
matplot(data, type = "l")
pre.period <- c(1, 24)
post.period <- c(25, 500)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
install.packages(c("caTools", "dismo", "geosphere", "htmltools", "hwriter", "jsonlite", "raster", "rgl", "RTextTools", "segmented", "sjPlot"))
source('~/.active-rstudio-document', echo=TRUE)
plot(mcmc_samples)
summary(mcmc_samples)
mean(y)
library(slidify)
setwd("~/Dropbox/Onkobioloogia/")
author("Onkobioloogia")
author("Onkoviirused")
setwd("~/Dropbox/Onkobioloogia/")
author("Onkoviirused")
publish(user = "tpall", repo = "Onkoviirused")
publish(user = "tpall", repo = "Onkoviirused")
library(slidify)
publish(user = "tpall", repo = "Onkoviirused")
library(slidify)
setwd("~/Dropbox/Onkobioloogia/")
author("Onkoviirused")
publish(user = "tpall", repo = "Onkoviirused")
library(slidify)
library("slidifyLibraries")
slidify("index.Rmd")
browseURL("index.html")
publish("Onkoviirused","tpall")
slidify("index.Rmd")
browseURL("index.html")
publish("Onkoviirused","tpall")
library(slidify)
library("slidifyLibraries")
slidify("index.Rmd")
browseURL("index.html")
publish("Onkoviirused","tpall")
slidify("index.Rmd")
publish("Onkoviirused","tpall")
install.packages("stringi")
install.packages(c("multcomp", "rstudioapi"))
